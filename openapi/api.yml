openapi: 3.0.3
info:
  title: Bookstore API
  version: 1.0.0
  description: An API for managing books and authors in a bookstore.

paths:
  /books:
    get:
      tags:
        - books
      summary: Get a list of books
      operationId: getBooks
      parameters:
        - name: genre
          in: query
          description: Filters books of the given genre
          required: false
          schema:
            type: string
            example: science fiction
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /books/{bookId}:
    get:
      tags:
        - books
      summary: Get a book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          required: true
          description: An identifier of a book
          schema:
            type: integer
            example: 25
      responses:
        "200":
          description: Information about a book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  /authors:
    get:
      tags:
        - authors
      summary: Get a list of authors
      operationId: getAuthors
      responses:
        "200":
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      tags:
        - authors
      summary: Create a new author
      operationId: postNewAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorSubmissionData"
      responses:
        "201":
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "422":
          description: Invalid Author data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /authors/{authorId}:
    get:
      tags:
        - authors
      summary: Retrieve information an Author
      operationId: getAuthorById
      parameters:
        - $ref: "#/components/parameters/authorId"
      responses:
        "201":
          description: Data representing an Author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /authors/{authorId}/books:
    get:
      tags:
        - books
      summary: Retrieves all the books from the given author
      operationId: getBooksForAuthor
      parameters:
        - $ref: "#/components/parameters/authorId"
      responses:
        "200":
          description: A list of books from the author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      tags:
        - books
      summary: Create a new book for the given author
      operationId: createNewBookForAuthor
      parameters:
        - $ref: "#/components/parameters/authorId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookSubmissionData"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        authorId:
          type: integer
      allOf:
        - $ref: "#/components/schemas/BookSubmissionData"

    BookSubmissionData:
      type: object
      properties:
        title:
          type: string
        publicationDate:
          type: string
          format: date
        genre:
          type: array
          items:
            type: string
        description:
          type: string
        coverImageUrl:
          type: string
          format: url
        numberOfPages:
          type: integer
      required:
        - title
        - publicationDate
        - genre

    Author:
      type: object
      properties:
        id:
          type: string
      allOf:
        - $ref: '#/components/schemas/AuthorSubmissionData'

    AuthorSubmissionData:
      type: object
      properties:
        name:
          type: string
        birthDate:
          type: string
        countryName:
          type: string
        biography:
          type: string
      required:
        - name

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: string
        detail:
          type: string
        instance:
          type: string

  parameters:
    authorId:
      name: authorId
      in: path
      description: The identifier for a given Author
      required: true
      schema:
        type: integer
        example: 34
